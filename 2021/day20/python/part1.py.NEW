import sys
from typing import List, Set, Tuple

MAPPING = {
    ".": 0,
    "#": 1,
}


def parse(lines: List[str]) -> Tuple[List[int], Set[Tuple[int, int]]]:
    algorithm, image = [], set()

    index = 0
    while lines[index] != "":
        algorithm.extend([MAPPING[pixel] for pixel in lines[index]])
        index += 1

    index += 1
    for r in range(len(lines) - index):
        for c in range(len(lines[index])):
            if MAPPING[lines[r + index][c]] == 1:
                image.add((r, c))

    return algorithm, image


def find_bounds(image: Set[Tuple[int, int]]) -> Tuple[int, int, int, int]:
    r1 = min(image, key=lambda x: x[0])[0]
    r2 = max(image, key=lambda x: x[0])[0]
    c1 = min(image, key=lambda x: x[1])[1]
    c2 = max(image, key=lambda x: x[1])[1]
    return r1, r2, c1, c2


def calculate_pixel(
    algorithm: List[int], image: Set[Tuple[int, int]], r: int, c: int
) -> int:
    index = 0
    for dr in (-1, 0, 1):
        for dc in (-1, 0, 1):
            index = index << 1
            if (r + dr, c + dc) in image:
                index += 1
    return algorithm[index]


def step(
    algorithm: List[int], image: Set[Tuple[int, int], inf: int]
) -> Set[Tuple[int, int]]:
    next_image = set()
    r1, r2, c1, c2 = find_bounds(image)
    for r in range(r1 - 1, (r2 + 1) + 1):
        for c in range(c1 - 1, (c2 + 1) + 1):
            if r1 <= r <= r2 and c1 <= c <= c2:
                value = calculate_pixel(algorithm, image, r, c)
                if value:
                    next_image.add((r, c))
            else:
                if inf:
    return next_image


def dump(image: Set[Tuple[int, int]]):
    r1, r2, c1, c2 = find_bounds(image)
    for r in range(r1, r2 + 1):
        for c in range(c1, c2 + 1):
            sys.stdout.write("#" if (r, c) in image else ".")
        sys.stdout.write("\n")

"""
                    index = index << 1 | (
                        int((di, dj) in pixels)
                        if (min_i <= di <= max_i and min_j <= dj <= max_j)
                        else infinite_bit
                    )
"""

def compute_answer(lines: List[str]) -> int:
    algorithm, image = parse(lines)
    # dump(image)
    image = step(algorithm, image, 0 & algorithm[0])
    # dump(image)
    image = step(algorithm, image, 1 & algorithm[1])
    dump(image)
    return len(image)
